---
name: Build

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      artifact-name:
        required: false
        type: string
        default: artifact
      artifact-retention-days:
        required: false
        type: number
        default: 7

    outputs:
      artifact-name:
        description: Name of the uploaded build artifact
        value: ${{ jobs.build.outputs.artifact-name }}
      package-file:
        description: Base name of the bundled package file (.tar.gz)
        value: ${{ jobs.build.outputs.package-file }}
      attestation-file:
        description: Base name of the bundled attestation file (.sigstore.json)
        value: ${{ jobs.build.outputs.attestation-file }}
      notes-file:
        description: Base name of the bundled release notes file (.md)
        value: ${{ jobs.build.outputs.notes-file }}

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}

    permissions:
      contents: write
      id-token: write
      attestations: write

    outputs:
      artifact-name: ${{ inputs.artifact-name }}
      package-file: ${{ steps.artifact.outputs.package-file }}
      attestation-file: ${{ steps.artifact.outputs.attestation-file }}
      notes-file: ${{ steps.artifact.outputs.notes-file }}

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Generate version.json
        id: version
        env:
          VERSION: ${{ github.ref_name }}
          COMMIT: ${{ github.sha }}
        run: |
          cat > version.json << EOF
          {
            "Version": "${VERSION}",
            "Commit": "${COMMIT}",
            "BuildDate": "$(date --utc +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          cat version.json

      - name: Create package
        id: package
        env:
          VERSION: ${{ github.ref_name }}
          OUT_DIR: dist
        run: |
          mkdir -p "${OUT_DIR}"
          OUT_FILE="mcbox-${VERSION}.tar.gz"
          tar \
              --create \
              --gzip \
              --file "${OUT_DIR}/${OUT_FILE}" \
                      mcbox-core.bash \
                      mcbox-server.bash \
                      version.json \
                      defaults/
          echo "out-dir=${OUT_DIR}" >> "${GITHUB_OUTPUT}"
          echo "out-file=${OUT_FILE}" >> "${GITHUB_OUTPUT}"

      - name: Generate package attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        id: attestation
        with:
          subject-path: "${{ steps.package.outputs.out-dir }}/${{ steps.package.outputs.out-file }}"

      - name: Generate release notes
        uses: orhun/git-cliff-action@d77b37db2e3f7398432d34b72a12aa3e2ba87e51 # v4.6.0
        id: git-cliff
        with:
          config: cliff.toml
          args: --latest --strip header
        env:
          OUTPUT: "${{ steps.package.outputs.out-dir }}/CHANGES.md"

      - name: Prepare artifact contents
        id: artifact
        env:
          OUT_DIR: ${{ steps.package.outputs.out-dir }}
          OUT_FILE: ${{ steps.package.outputs.out-file }}
          ATTESTATION_ORIGIN_FILE: ${{ steps.attestation.outputs.bundle-path }}
          NOTES_ORIGIN_FILE: ${{ steps.git-cliff.outputs.changelog }}
        run: |
          ATTESTATION_FILE="${OUT_FILE}.sigstore.json"
          cp "${ATTESTATION_ORIGIN_FILE}" "${OUT_DIR}/${ATTESTATION_FILE}"
          echo "package-file=${OUT_FILE}" >> "${GITHUB_OUTPUT}"
          echo "attestation-file=${ATTESTATION_FILE}" >> "${GITHUB_OUTPUT}"
          echo "notes-file=$(basename "${NOTES_ORIGIN_FILE}")" >> "${GITHUB_OUTPUT}"

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ steps.package.outputs.out-dir }}
          retention-days: ${{ inputs.artifact-retention-days }}
          if-no-files-found: error
          overwrite: true
          include-hidden-files: false
